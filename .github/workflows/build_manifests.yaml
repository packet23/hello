name: Build Manifests

on:
  workflow_call:
    inputs:
      artifact_pattern:
        required: true
        type: string
      container_repository:
        required: true
        type: string
      registry_username:
        required: true
        type: string
      push:
        required: true
        type: boolean
      workflow_run_id:
        required: true
        type: string

jobs:
  build-manifests:
    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:3
        ports:
          - 5000/tcp

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifacts from specific workflow run
        uses: actions/download-artifact@v5
        with:
          pattern: ${{ inputs.artifact_pattern }}
          run-id: ${{ inputs.workflow_run_id }}

      - name: List
        run: |
          ls -lR

      - name: Load images
        id: load-images
        run: |
          {
            echo 'digests<<EOF'
            (
              for tarball in ${{ inputs.artifact_pattern }}/*.tar; do
                docker load -q -i "$tarball"
              done
            ) | sed -ne 's#^Loaded image ID: ##p'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Print images
        run: |
          docker image ls -a

      - name: Print digests
        env:
          DIGESTS: ${{ steps.load-images.outputs.digests }}
        run: |
          echo "$DIGESTS"

      - name: Push images to local registry
        id: local-push
        env:
          DIGESTS: ${{ steps.load-images.outputs.digests }}
          REGISTRY: "127.0.0.1:${{ job.services.registry.ports['5000'] }}"
        run: |
          {
            echo 'images<<EOF'
            echo "$DIGESTS" | (
              while read digest; do
                tag=$(uuidgen)
                docker image tag "$digest" "$REGISTRY/image:$tag"
                docker image push -q "$REGISTRY/image:$tag"
              done
            )
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Create manifest in local registry
        id: create-manifest
        env:
          IMAGES: ${{ steps.local-push.outputs.images }}
          REGISTRY: "127.0.0.1:${{ job.services.registry.ports['5000'] }}"
        run: |
          docker buildx imagetools create -t "$REGISTRY/manifest" $IMAGES
          echo "manifest=$REGISTRY/manifest" >> "$GITHUB_OUTPUT"

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.container_repository }}
          username: ${{ inputs.registry_username }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Container Repository
        if: ${{ inputs.push }}
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.manifest }}
          CONTAINER_REPOSITORY: ${{ inputs.container_repository }}
        run: |
          docker buildx imagetools create \
                -t "$CONTAINER_REPOSITORY" \
                "$MANIFEST"
