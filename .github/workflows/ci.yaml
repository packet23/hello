name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 6'
  push:
    branches:
      - main

env:
  # https://docs.docker.com/build/ci/github-actions/reproducible-builds/
  SOURCE_DATE_EPOCH: 0
  # https://docs.docker.com/build/ci/github-actions/build-summary/#disable-job-summary
  DOCKER_BUILD_SUMMARY: false

jobs:
  build_images:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
          - os: ubuntu-24.04-arm
    steps:
      -
        name: Checkout
        uses: actions/checkout@v5
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Create output dir
        run:  |
          install -d out
      -
        name: Build container image
        uses: docker/build-push-action@v6
        with:
          outputs: |
            type=docker,dest=./out/image-${{ matrix.os }}.tar

      - uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./out/image-*.tar

  build_manifests:
    runs-on: ubuntu-24.04
    needs: [build_images]

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    services:
      registry:
        image: registry:3
        ports:
          - 5000/tcp

    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: image-*
          path: out
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Load images
        id: load-images
        run: |
          {
            echo 'digests<<EOF'
            (
              for tarball in out/image-*.tar; do
                docker load -q -i "$tarball"
              done
            ) | sed -ne 's#^Loaded image ID: ##p'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      -
        name: Print images
        run: |
          docker image ls -a
      -
        name: Print digests
        env:
          DIGESTS: ${{ steps.load-images.outputs.digests }}
        run: |
          echo "$DIGESTS"
      -
        name: Push images to local registry
        id: local-push
        env:
          DIGESTS: ${{ steps.load-images.outputs.digests }}
          REGISTRY: "127.0.0.1:${{ job.services.registry.ports['5000'] }}"
        run: |
          {
            echo 'images<<EOF'
            echo "$DIGESTS" | (
              while read digest; do
                tag=$(uuidgen)
                docker image tag "$digest" "$REGISTRY/image:$tag"
                docker image push -q "$REGISTRY/image:$tag"
              done
            )
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      -
        name: Create manifest in local registry
        id: create-manifest
        env:
          IMAGES: ${{ steps.local-push.outputs.images }}
          REGISTRY: "127.0.0.1:${{ job.services.registry.ports['5000'] }}"
        run: |
          docker buildx imagetools create -t "$REGISTRY/manifest" $IMAGES
          echo "manifest=$REGISTRY/manifest" >> "$GITHUB_OUTPUT"
      -
        name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Publish
        if: github.event_name != 'pull_request'
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.manifest }}
          GHCR_REPO: "ghcr.io/${{ github.repository_owner }}"
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          run: |
            docker buildx imagetools create \
                  -t "${DOCKERHUB_REPO}/hello" \
                  "${MANIFEST}"
